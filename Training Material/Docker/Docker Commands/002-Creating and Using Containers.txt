# Creating and Using Containers

## Check Our Docker Install and Config

docker version

docker info

## Starting a Nginx Web Server

docker container run --publish 80:80 nginx

docker container run --publish 81:80 --detach nginx

curl localhost:81

docker container ls

docker container stop 690

docker container ls

docker container ls -a

docker container run --publish 82:80 --detach --name webhost nginx

curl localhost:82

docker container ls -a

docker container logs webhost

docker container top webhost

docker container --help

docker container ls -a

docker container rm 63f 690 ode

docker container ls -a

docker container rm -f 63f

docker container ls -a

## Container VS. VM: It's Just a Process

docker run --name mongo -d mongo

docker ps

docker top mongo

docker stop mongo

ps -aux | grep mongod

docker ps

docker top mongo

docker start mongo

docker ps

docker top mongo

ps -aux | grep mongod

## What's Going On In Containers: CLI Process Monitoring

docker container run -d --name nginx nginx

docker container run -d --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql

docker container ls

docker container top mysql

docker container top nginx

docker container inspect mysql

docker container stats

docker container ls

## Getting a Shell Inside Containers: No Need for SSH

docker container run -it --name proxy nginx bash

docker container ls

docker container ls -a

docker container run -it --name ubuntu ubuntu
# exit from container

docker container ls

docker container ls -a

docker container start -ai ubuntu
# exit from container

docker container exec -it mysql bash
# exit from container

docker container ls

docker pull alpine

docker image ls

docker container run -it alpine sh
# exit from container

## Docker Networks: CLI Management of Virtual Networks

docker network ls

docker network inspect bridge

docker network create my_app_net

docker network ls

docker container run -d --name new_nginx --network my_app_net nginx

docker network inspect my_app_net

docker network connect <network name> <container name>

docker network inspect my_app_net

docker container inspect TAB COMPLETION     # See if connected to 2 networks

docker network disconnect TAB COMPLETION

docker container inspect                    # Now connected to only 1 network
